/**
    Before using these functions, must create the database by first
    running from command line: node createDatabase.js

    To add a task, use the function
        addTask(Task taskObj, function callback)
    To add a user, use the function
        addUser(String userEmail, String userNickname, String userPassword, function callback)
    To add a comment, use the function
        addComment(String commentText, int taskid, String commenterEmail)

    Error codes:
        0: everythings OK
        -1: error from above (opening db, closing db, ....)
        -2: insertion or deletion object already exists or doesn't exist, etc...)
*/
var basepath = require('basepath').mainpath;
var sqlite = require(basepath + 'lib/node-sqlite/sqlite');
var fs = require('fs');
var path = require('path');
var sanitizer = require('sanitizer');

// directories changed, assuming the node process will be
// started with CourseProject/ as the working directory
var dbLocation = basepath + "db/main.db"; // database location in file system
var dbLogLocation = basepath + "db/log.txt"; // database log
var db;

/**
    Parameter1: an error object describing an error. (error)

    This function logs this error in a txt file.
*/
function writeLog(logLine) {

    var logStream = fs.createWriteStream(dbLogLocation,
                            {flags: 'a',
                            encoding: 'binary',
                            mode: 0666}
                        );
    logStream.write(new Date() + "\n\t" + logLine + "\n");

    logStream.on('drain', function () {
        logStream.end();
    });
}

/**
    Parameter1: a sql query. (String)
    Parameter2: the arguments to bind to the query. (String)
    Parameter3: a function with 2 args, error and rows, which
        performs operations on the query results. (function)

    This is only a helper function for this js file.
*/
function accessDB(sql, executionArgs, inputFunction) {

    path.exists(dbLocation, function (exists) {
        if (!exists) {
            console.log("Database doesn't exist. First run createDatabase.js");
            throw new Error('');
        }
    });

    if (!db) {
        db = new sqlite.Database();
    }

    var inputFunctionWithClose = function (err, row) {
        db.close(function (error) {
            if (error) {
                writeLog(error);
                inputFunction(error, undefined);
                return -2; // error code for caller
            } else {
                inputFunction(err, row);
            }
        });
    };

    db.open(dbLocation, function (error) {
        if (error) {
            writeLog(new Date() + "\n\tfunc: accessDB" + error + "\n");
            return -2; // error code for caller
        }

        if (executionArgs === null) {
            db.execute(sql, inputFunctionWithClose);
        } else {
            // sanitize sql arguments
            for(i in executionArgs) {
			    if (typeof(executionArgs[i]) === 'string') {
				    executionArgs[i] = sanitizer.escape(executionArgs[i]);
			    }
            }

            db.execute(sql, executionArgs, inputFunctionWithClose);
        }
    });
}


/*
 * safeCallback(stat,exi,det,rows,callback)
 *    correctly handles the case where the callback function is not provided
 */
var safeCallback = function (stat, exi, det, rows, callback) {
    if (callback) {
        callback({status: stat, exists: exi, rows: rows, detail: det}); 
    }
};


/**
    Parameter1: a sql query. (String)
    Parameter2: a callback function to handle the returned value. (function)
    Parameter3: argument array to replace ? placeholders. ([String])

    This is only a helper function for this js file.
*/

var queryGetBoolean = function (sql, callback, qargs) {

    var errorHandling = function (error, rows) {
        if (error) {
            writeLog(error);
            safeCallback(-2, undefined, error, rows, callback); 
            throw new Error(error.message);
        } else if (rows.length !== 0) { 
            writeLog("SQL: " + sql + " exists.");
            safeCallback(0, true, error, rows, callback); 
        } else {
            writeLog("SQL: " + sql +  " does not exist.");
            safeCallback(0, false, error, rows, callback); 
        }
    };

    if (!qargs) {
        accessDB(sql, null, errorHandling);
    } else {
        accessDB(sql, qargs, errorHandling);
    }
};

/**
    Parameter1: a sql query. (String)
    Parameter2: a callback function to handle the returned value. (function)
    Parameter3: argument array to replace ? placeholders. ([String])

    This is only a helper function for this js file.
*/
var queryGetRows = function (sql, callback, qargs) {

    var errorHandling = function (error, rows) {
        if (error) {
            writeLog(error);
            safeCallback(-2, undefined, error, rows, callback); 
        } else {
            writeLog("success:" + sql + " arguments: " + qargs);
            safeCallback(0, undefined, error, rows, callback); 
        }
    };

    if (!qargs) {
        accessDB(sql, null, errorHandling);
    } else {
        accessDB(sql, qargs, errorHandling);
    }
};

/**
    Parameter1: an object of type Task from task.js. (Task)
    Parameter2: callback. (function)

    This function stores the task object in the database.
*/
module.exports.addTask = function (taskObj, callback) {
    sql = "INSERT INTO task (taskName, description, timeSpent, timeLeft,"
        + " priority, progress, status, user)"
        + " VALUES (?,?,?,?,?,?,?,?)";
    queryGetRows(sql, callback, 
        [taskObj.getTaskName(), taskObj.getDescription(), 
        taskObj.getTimeSpent(), taskObj.getTimeLeft(), 
        taskObj.getPriority(), taskObj.getProgress(), 
        taskObj.getStatus(), taskObj.getUser()]);
};

/**
    Parameter1: the task id. (String)
    Parameter2: the task name. (String)
    Parameter3: the task description. (String)
    Parameter4: the task priority level. (String)
    Parameter5: the task progress. (String)
    Parameter6: the task status. (String)
    Parameter7: callback. (function)
    
    This function updates the information about a task object.
 */

module.exports.updateTask = function(id, desc, level, prog, stats, callback) {
    queryGetRows("UPDATE task SET description = ?, priority = ?, progress = ?, status = ? WHERE taskid = ?", 
	callback, [desc, level, prog, stats, id]);
}

/**
    Parameter1: name of task to delete. (String)
    Parameter2: callback. (function)

    removes task with given taskName if it exists.
*/
module.exports.removeTask = function (taskName, callback) {
    queryGetRows("DELETE FROM task WHERE taskName = ?", callback, [taskName]);
};

module.exports.getUser = function (userEmail, callback) {
    queryGetRows("SELECT * FROM user WHERE email = ?", callback, [userEmail]);
}

/**
    Parameter1: an email. (String)
    Parameter2: a nickname. (String)
    Parameter3: a password. (String)
    Parameter4: callback (function)

    This function takes the input and stores it in the user table
    of the database.
*/
module.exports.addUser = function (userEmail, userNickname, userPassword, callback) {
    if (userNickname === "") {
        userNickname = (userEmail.split("@"))[0];
    }
    
    var sql = "SELECT * FROM user WHERE email = ? OR nickname = ?";

    accessDB(sql, [userEmail, userNickname], function (error, rows) {
        if (error) {
            writeLog(error);
            if (callback) { callback({status: -2, detail: error}); }
            return -2;
        }

        if (rows.length !== 0) {
            writeLog("func: addUser, email " + userEmail + " already exists.");
            if (callback) { callback({status: -1, detail: {message: "user exists"}}); }
            return -1; // error code for caller
        } else {
            sql = "INSERT INTO user (email,nickname,password) " +
                "VALUES (?,?,?)";

            accessDB(sql, [userEmail, userNickname, userPassword],
                function (error, rows) {
                    if (error) {
                        writeLog(error);
                        if (callback) { callback({status: -2, detail: error}); }
                    }

                    writeLog("user " + userEmail + ", " +
                        userNickname + ", with password " +
                        userPassword + " added.");
                    if (callback) { callback({status: 0, detail: error}); }
                }
            );
        }
    });
};

/**
    Parameter1: nickName to check for. (String)
    Parameter2: callback (function)

    this function is used to check if a user with the given nickName exists
    in the database.
*/
module.exports.nickExists = function (nickName, callback) {
    queryGetBoolean("SELECT * FROM user WHERE nickname = ?", callback, [nickName]);
};

/**
    Parameter1: email to check. (String)
    Parameter2: callback. (function)

    Checks if a user email exists in the db.
*/
module.exports.userExists = function (userEmail, callback) {
    queryGetBoolean("SELECT * FROM user WHERE email = ?", callback, [userEmail]);
};

/**
    Parameter1: email of user to remove. (String)
    Parameter2: callback. (function)

    removes the user corresponding to the given email if it exists.
*/
module.exports.removeUser = function (userEmail, callback) {
    queryGetRows("DELETE FROM user WHERE email = ?", callback, [userEmail]);
};

/**
    Parameter1: taskid of the comments which need to be removed. (String)
    Parameter2: callback. (function)

    removes the comments corresponding to the given taskid if it exists.
*/
module.exports.removeComments = function (commentsTaskid, callback) {
    queryGetRows("DELETE FROM user WHERE taskid = ?", callback, [commentsTaskid]);
};

/**
    Parameter1: a comment. (String)
    Parameter2: the taskid that the comment refers to. (String)
    Parameter3: the email of the commenter. (String)

    This function adds a comment to the comment table in the database.
*/
module.exports.addComment = function (commentText, commentTaskid, commenterEmail, callback) {

    var sql = "SELECT * FROM user WHERE email = ?";

    accessDB(sql, [commenterEmail], function (error, rows) {
        if (error) {
            writeLog(error);
            if (callback) { callback({status: -2, detail: error}); }
            return -2; // error code for caller
        }

        if (rows.length === 0) {
            writeLog("func: addComment, user email " +
                commenterEmail + " not found.");
            if (callback) { callback({status: -1, detail: error}); }
            return -1; // error code for caller
        }

        sql = "SELECT * FROM task WHERE taskid = ?";

        accessDB(sql, [commentTaskid], function (error, rows) {
            if (error) {
                writeLog(error);
                if (callback) { callback({status: -2, detail: error}); }
                return -2; // error code for caller
            }

            if (rows.length === 0) {
                writeLog("func: addComment, taskid " +
                    commentTaskid + " not found.");
                if (callback) { callback({status: -1, detail: error}); }
                return -1; // error code for caller
            }

            sql = "INSERT INTO comment (thecomment,taskid,email) " +
                "VALUES (?,?,?)";

            accessDB(sql,
                [commentText, commentTaskid, commenterEmail],
                function (error, rows) {
                    if (error) {
                        writeLog(error);
                        if (callback) { callback({status: -2, detail: error}); }
                        return -2; // error code for caller
                    }

                    writeLog("comment for taskid " + commentTaskid +
                        " by " + commenterEmail + " added.");
                    if (callback) { callback({status: 0, detail: error}); }
                });
        });
    });
};

/**
    Parameter1: Table name.

    Parameter2: a function that takes in 2 arguments, the first
        being an error object, the second being an array of row
        objects representing the tuples returned from the
        database.

    Usage example:
        
    getTable("user", function(obj) {
        if(obj.status !== 0) {
            console.log(obj.detail);
            return;
        }

        for(i = 0; i < obj.rows.length; i++) {
            console.log(obj.rows[i].email);
            console.log(obj.rows[i].nickname);
            console.log(obj.rows[i].password);
        }
    });
*/
module.exports.getTable = function (tableName, callback) {
    queryGetRows("SELECT * FROM " + tableName, callback);
    // a '?' cannot be used here, do not use user input as 
    // an argument to this query
};

/**
    Like getTable, except returns the list of all tables
*/

module.exports.getTables = function (callback) {
    queryGetRows("SELECT name FROM sqlite_master WHERE type='table' ORDER BY name", callback);
};

/**
    Returns the row in the task table with id = taskid
*/
module.exports.getTask = function (taskid, callback) {
    queryGetRows("SELECT * FROM task WHERE taskid = ?", callback, [taskid]);
};

/**
    Parameter1: taskid for the task whose comments the caller wants.

    Parameter2: a function that takes in 2 arguments, the first
        being an error object, the second being an array of row
        objects representing the tuples returned from the
        database.

    Usage example:
    
    getCommentsForTask(1, function(obj) {
        if(obj.status !== 0) {
            console.log(obj.detail);
            return;
        }

        for(i = 0; i < obj.rows.length; i++) {
            console.log(obj.rows[i].thecomment);
            console.log(obj.rows[i].taskid);
            console.log(obj.rows[i].email);
        }
    });
*/
module.exports.getCommentsForTask = function (taskid, callback) {
    queryGetRows("SELECT * FROM comment WHERE taskid = ?", callback, [taskid]);
};



module.exports.getRecentActivity = function (callback) {
    var sql = "SELECT user.nickname AS UserName, feed.topic as Topic, feed.created as Created"
        + " FROM user, "
        + " (SELECT email AS author, \"New Comment on \"|| taskName AS topic, comment.created as created"
        + " FROM comment,task WHERE comment.taskid = task.taskid"
        + " UNION"
        + " SELECT user AS author, \"New Task: <a href=task?id=\"||task.taskid||\">\"||taskName||\"</a>\" AS topic, created"
        + " FROM task"
        + " UNION"
        + " SELECT email AS author, \"signed up today\" AS topic, created"
        + " FROM user) AS feed"
        + " WHERE user.email = feed.author"
        + " ORDER BY created DESC LIMIT 0,15";
    queryGetRows(sql, callback, null);
};
