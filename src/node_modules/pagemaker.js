var jaml = require('jaml');
var fs = require('fs');
var upops = require('uploadOps');
/*
 * pagemaker.js
 * Renders HTML pages in a standard 2 column floating div form.
 * Sample usage:
 *
 * page1 = new StandardPage();
 * page1.setTitle("Main Page");
 * page1.setContent("This is the main page" 
 *     +"<img src='http://www.boncherry.com/blog/wp-content/"
 *        +"uploads/2010/01/popcorn.jpg'>");
 * page1.addMenuItem("Next Page", "/page2.htm");
 *
 * response.write(page1.toHTML());
 *
 * This is probably the most basic possible usage (assuming the existance of
 * a HTTP request 'response') and will return the following:
 *
 * <html>
 *     <head>
 *         <title>Main Page</title>
 *         <link href="style.css" rel="stylesheet" type="text/css"/>
 *     </head>
 *     <body>
 *         <div id="header">
 *             <h1>Project Title</h1>
 *             <h2>Main Page</h2>
 *         </div>
 *         <div id="menus"><a href="/page2.htm">Next Page</a>
 *             <br/>
 *         </div>
 *         <div id="content">This is the main page<img src='http://www.boncherry.com/
 *         blog/wp-content/uploads/2010/01/popcorn.jpg'></div>
 *     </body>
 * </html>
 */

/*
 * Jaml template to convert a row returned from SQLite into a proper
 * feed entry
 */
Jaml.register('feedentry', function (row) {
    div({class: 'feedEntry'},
        div({class: 'feedUser'}, row.UserName),
        div({class: 'feedTopic'}, row.Topic),
        div({class: 'feedCreated'}, row.Created));
});

/*
 * 'script' Jaml function- takes a script={String url} object
 * as argument, formats a reference in the page head to this file
 */
Jaml.register('script', function (file) {
    script({type: 'text/javascript', src: file.url });
});

/*
 * 'menu' Jaml function- takes a menu={String url, String display} object
 * as argument, and formats a link for the menu div of the page
 */
Jaml.register('menu', function (menuitem) {
    li(a({href: menuitem.url}, menuitem.display));
});

Jaml.register('extraMenu', function (menuitem) {
    li(a({onClick: menuitem.functionName}, menuitem.display));
});

/*
 * 'stdpage' Jaml function- takes a page= {String title,
 * [menu] menu,
 * String content
 * String css} object,
 * This renders a page in a standard 2 column floating div style
 * described by the html/style.css file.
 */

Jaml.register('stdpage', function (page) {
    html(
        head(
            title(page.title.toString()),
            link(page.css),
            link(page.ico),
            Jaml.render('script', page.script)
        ),

        body(
            div({id: "main"},
                div({id: "links"},
                    a({href: "/UserProfile" }, this.nickname + " "+this.email+" "),
                    a({href: this.logLink}, this.logMsg),
                    " | ",
                    a({href: "/signup.html"}, "Signup")),
                
                div({id: "logo"},
                    h1("")),
                
                div({id: "content"},
                    div({id: "column1"},
                        div({id: "menu"},
                            h1("Menu"),
                            ul(
                                Jaml.render('menu', page.menu)
                            )),
                        
                        div({id: "addlinks"},
                            h1("Menu 2"),
                            ul(
                                Jaml.render('extraMenu', page.extraMenu)
                            )),
                        
                        div({id: "FeedsBox", class: "sidebaritem"},
                            h1("Feeds")
                            )),
                            
                    div({id: "column2"},
                        page.content)),
                    
                div({id: "footer"},
                    "credits")),
                
            "        <script>pullGenFeedsTo('FeedsBox');</script>\n"
        )
    );
});
      
/*
 * The standard page constructor, takes no arguments returns a page object
 * which may be modified to change the content and add title etc.
 *
 * Note: We dont need exports for StandardPage as it is a class, and we
 * create instances of it with 'new', which doesnt require the exports. -CM
 */

StandardPage = function (request) {
    this.title = "<!-- needs a title -->";
    this.menu = new Array();
    this.extraMenu = new Array();
    this.cookies = new Array();
    this.script = [{url: "/js/jquery-1.5.min.js"}, {url: "/js/gen_feed.js"}];
    this.content = "<!-- needs some content -->";
    this.css = {href: "/style2.css", rel: "stylesheet", type: "text/css"};
    this.ico = {rel: "shortcut icon", href: "/favicon.ico"};
    this.email = "";
    this.nickname = "";
    this.logLink = "/login.html";
    this.logMsg = "Login";

    /*
     * setContent(String newcontent) sets the content for the page.
     * This will be in the form of HTML, and will be placed in it's
     * literal form into the main content div of the page.
     *
     */
    this.setContent = function (newcontent) { 
        this.content = newcontent; 
    };

    /*
     * addContent(String newContent) adds the newContent to the current
     * content that is already there.
     */
    this.addContent = function (newcontent) {
        this.content += newcontent;
    };
    
    /*
     * setTitle(String newtitle) sets the title for the page
     *
     */
    this.setTitle = function (newtitle) { 
        this.title = newtitle; 
    };
    /*
     * addMenuItem(String newdisplay, String newurl)
     * adds a new menu link, with the display name 'newdisplay'
     * to the url 'newurl'
     */
    this.addMenuItem = function (newdisplay, newurl) {
        this.menu[this.menu.length] = {display: newdisplay,
                        url: newurl };
    };

    /*
     * addOnClickItem(String newdisplay, String newurl)
     * adds a new Menu 2 link, with the display name 'newdisplay'
     * and calls the function 'newfunc' when clicked
     */

    this.addOnClickItem = function (newdisplay, newfunc) {
        this.extraMenu[this.extraMenu.length] = {display: newdisplay,
                        functionName: newfunc };
    };

    /*
     * addScript(String newurl)
     * adds a new reference to a javascript file at the url 'newurl'
     */
    this.addScript = function (newurl) {
        this.script[this.script.length] = { url: newurl };
    };

    /*
     * processCookies(request)
     * processes the cookies and adds the information to the main page
     */
    this.processCookies = function() {
        if(request) {
            var cookies = upops.parseCookies(request.headers);
            
            if(cookies.Email) {
                this.email = cookies.Email;
                this.logLink = "/logout";
                this.logMsg = "Logout";
            }
            if(cookies.Nickname) {
                this.nickname = cookies.Nickname;               
            }            
        }
    }

    /*
     * toHTML() - returns the page data, rendered in the form of HTML,
     * by Jaml.
     *
     */
    this.toHTML = function () { 
        this.processCookies();
        return Jaml.render('stdpage', {
            title: this.title, 
            menu: this.menu, 
            extraMenu: this.extraMenu,
            content: this.content,
            css: this.css,
            script: this.script,
            email: this.email,
            nickname: this.nickname,
            logLink: this.logLink,
            logMsg: this.logMsg,
            ico: this.ico
        }); 
    };

    /*
     * standardMenus() - adds 3 menus to the page as a sample.
     *
     */
    this.standardMenus = function () {
        this.addMenuItem("Main", "/index.html");
        this.addMenuItem("Signup", "/signup.html");
       
         if(request !== undefined) {
            var cookies = upops.parseCookies(request.headers);
            if(cookies.Email !== undefined) {

                this.addMenuItem("Task List", "/tasklist.html");                
                this.addMenuItem("Add Task", "/addtask.html");
                this.addMenuItem("User Profile", "/UserProfile");
                this.addMenuItem("Members Page", "/members.html");
                this.addMenuItem("View Tables", "/viewTable");
            }
        }
    };
};


module.exports.StandardPage = StandardPage;

module.exports.ParsePage = function (file, request, callback) {
    var page1 = new StandardPage(request);
    var content;
    var istream = fs.createReadStream(file);
    istream.setEncoding('utf8');
    
    istream.on('data', function (data) {
        content += data;
    });

        
    istream.on('end', function () {

        page1.standardMenus();


        //Find all strings with <script*src="*.js"*>
        //NOTE: The above comment is a simplification
        var scripts = content.match(/<script[^>]*src=\"\S*\.js\"[^>]*>/g);
        //For each string, extract the actual js filename and add it to the page
        if (scripts) {
            var oneScript, i;
            for (i = 0; i < scripts.length; i++) {
                //Extract 'src="file.js"'
                oneScript = scripts[i].match(/src=\"\S*\.js\"/)[0];
                //Extract 'file.js'
                oneScript = oneScript.slice('src="'.length, oneScript.length - 1);
                //Add it to the page
                page1.addScript(oneScript);
            }
        }

        //find the body of the page
        var body = content.match(/<body[^>]*>[\s\S]*<\/body>/)[0];
        body = body.slice(body.match(/<body[^>]*>/)[0].length, body.length - ("</body>".length));
        page1.setContent(body);

        var title = content.match(/<title>[\s\S]*<\/title>/);
        if (!title) {
            page1.setTitle("<--- needs a title ---->");
        } else {
            title = title[0].slice("<title>".length, title[0].length - ("</title>".length));
            page1.setTitle(title);
        }
        
        callback(page1.toHTML());
    });
};
